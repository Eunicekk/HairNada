<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.hairnada.mapper.admin.AdminMapper">
<!--관리자 로그인  -->
 <select id="login" resultType="long">
  SELECT MEMBERSHIP_NUMBER FROM TBL_USER tu
  WHERE USER_ID = #{userId} AND USER_PASSWORD = #{userPassword}
 </select>

 <!-- 회원 정보 전체 조회 -->
 <select id="selectUserList" resultType="userDto">
  SELECT
   USER_NUMBER,
   USER_NAME,
   USER_ID,
   USER_NICKNAME,
   MEMBERSHIP_NAME,
   USER_STATUS
  FROM
   (
    SELECT
     RN,
     USER_NUMBER,
     USER_NAME,
     USER_ID,
     USER_NICKNAME,
     MEMBERSHIP_NAME,
     USER_STATUS
    FROM
     (
      SELECT
       ROWNUM AS RN,
       USER_NUMBER,
       USER_NAME,
       USER_ID,
       USER_NICKNAME,
       MEMBERSHIP_NAME,
       USER_STATUS
      FROM
       (
        SELECT
         USER_NUMBER,
         USER_NAME,
         USER_ID,
         USER_NICKNAME,
         tm.MEMBERSHIP_NAME,
         USER_STATUS
        FROM
         TBL_USER tu
          JOIN TBL_MEMBERSHIP tm ON
          tm.MEMBERSHIP_NUMBER = tu.MEMBERSHIP_NUMBER
        WHERE
         USER_NUMBER >= 1
        ORDER BY
         USER_NUMBER DESC
       )
     )
    <![CDATA[
    WHERE
     ROWNUM <= #{page} * #{amount}
             ]]>
        )
  WHERE
   RN > (#{page} - 1 ) * #{amount}
 </select>

 <!-- 회원 수 -->
 <select id="userTotal" resultType="_int">
  SELECT count(user_number) FROM tbl_user
 </select>

<!-- 활동 정지 시키기-->
 <update id="stopUser">
  UPDATE TBL_USER
  SET USER_STATUS = 0
  WHERE USER_NUMBER = #{userNumber}
 </update>
 <!-- 활동 정지 시키기-->
 <update id="restoreUser">
  UPDATE TBL_USER
  SET USER_STATUS = 1
  WHERE USER_NUMBER = #{userNumber}
 </update>
 <!-- 등업 신청 목록 조회 -->
 <select id="selectLevelList" resultType="levelVo">
  SELECT
   RNUM,
   LEVEL_NUMBER ,
   LEVEL_TITLE ,
   USER_NUMBER ,
   USER_NAME,
   USER_ID ,
   MEMBERSHIP_NAME
  FROM
   (
    SELECT
     ROWNUM AS RNUM,
     LEVEL_NUMBER ,
     LEVEL_TITLE ,
     USER_NUMBER ,
     USER_NAME,
     USER_ID ,
     MEMBERSHIP_NAME
    FROM
     (
      SELECT
       LEVEL_NUMBER ,
       LEVEL_TITLE ,
       tu.USER_NUMBER ,
       tu.USER_NAME,
       tu.USER_ID ,
       tm.MEMBERSHIP_NAME
      FROM
       TBL_LEVEL tl
        JOIN TBL_USER tu
             ON
              tu.USER_NUMBER = tl.USER_NUMBER
        JOIN TBL_MEMBERSHIP tm
             ON
              tm.MEMBERSHIP_NUMBER = tu.MEMBERSHIP_NUMBER
      ORDER BY
       LEVEL_NUMBER DESC
     )
  <![CDATA[
    WHERE
     ROWNUM <= #{page} * #{amount}
             ]]>
        )
  WHERE
   RNUM > (#{page} - 1 ) * #{amount}
 </select>

 <!-- 등업 게시글 읽어오기 -->
 <select id="levelBoardRead" resultType="levelVo">
  SELECT LEVEL_NUMBER , LEVEL_TITLE , LEVEL_CONTENT , LEVEL_REGISTER_DATE, tm.MEMBERSHIP_NUMBER, tm.MEMBERSHIP_NAME , tl.USER_NUMBER ,
         tu.USER_ID , tu.USER_NAME, tu.MEMBERSHIP_NUMBER AS USER_MEMBERSHIP_NUMBER FROM TBL_LEVEL tl
  JOIN TBL_MEMBERSHIP tm
  ON tm.MEMBERSHIP_NUMBER  = tl.MEMBERSHIP_NUMBER
  JOIN TBL_USER tu
  ON tu.USER_NUMBER  = tl.USER_NUMBER
  WHERE LEVEL_NUMBER  = #{levelNumber}
 </select>

<!-- 등업 게시글 사진 -->
 <select id="selectLevelFile" resultType="levelFileDto">
  SELECT LEVEL_FILE_NUMBER , LEVEL_FILE_NAME , LEVEL_FILE_UPLOAD_PATH , LEVEL_FILE_UUID, LEVEL_NUMBER FROM TBL_LEVEL_FILE tlf
  WHERE LEVEL_NUMBER = #{levelNumber}
 </select>

 <!-- 등업 게시글 전체 수 -->
 <select id="levelTotal" resultType="_int">
  SELECT count(level_number) FROM tbl_level
 </select>

<!-- <!—- 등업 게시글 수락 -—>-->
 <update id="updateMembershipNumber">
  UPDATE TBL_USER
  SET MEMBERSHIP_NUMBER = #{membershipNumber}
  WHERE USER_NUMBER = #{userNumber}
 </update>

<!-- 상품 게시글 목록 조회 -->
 <select id="selectStoreList" resultType="storeVo">
  SELECT
   STORE_NUMBER ,
   STORE_TITLE ,
   STORE_PRICE ,
   STORE_CATEGORY_NAME,
   STORE_FILE_NAME,
   STORE_FILE_UPLOAD_PATH,
   STORE_FILE_UUID
  FROM
   (
    SELECT
     ROWNUM AS RNUM ,
     STORE_NUMBER ,
     STORE_TITLE ,
     STORE_PRICE ,
     STORE_CATEGORY_NAME,
     STORE_FILE_NAME,
     STORE_FILE_UPLOAD_PATH,
     STORE_FILE_UUID
    FROM
     (
      SELECT
       ts.STORE_NUMBER ,
       ts.STORE_TITLE ,
       ts.STORE_PRICE ,
       ts.STORE_CATEGORY_NUMBER,
       tsf.STORE_FILE_NAME,
       STORE_FILE_UPLOAD_PATH,
       STORE_FILE_UUID,
       tsc.STORE_CATEGORY_NAME
      FROM
       TBL_STORE ts
        JOIN TBL_STORE_CATEGORY tsc
             ON
              ts.STORE_CATEGORY_NUMBER = tsc.STORE_CATEGORY_NUMBER
        LEFT JOIN
       (
        SELECT
         STORE_FILE_NUMBER ,
         STORE_FILE_NAME ,
         STORE_FILE_UPLOAD_PATH ,
         STORE_FILE_UUID ,
         STORE_NUMBER
        FROM
         (
          SELECT
           STORE_FILE_NUMBER ,
           STORE_FILE_NAME ,
           STORE_FILE_UPLOAD_PATH ,
           STORE_FILE_UUID ,
           STORE_NUMBER ,
           RANK() OVER(PARTITION BY STORE_NUMBER ORDER BY STORE_FILE_NUMBER) RK
          FROM
           TBL_STORE_FILE)
        WHERE
         RK = 1) tsf
       ON
        ts.STORE_NUMBER = tsf.STORE_NUMBER
      ORDER BY
       ts.STORE_NUMBER DESC)
<![CDATA[
    WHERE
     ROWNUM <= #{page} * #{amount}
             ]]>
        )
  WHERE
   RNUM > (#{page} - 1 ) * #{amount}
 </select>

<!-- 스토어 게시글 작성 -->
 <insert id="insertStore">
    <selectKey keyProperty="storeNumber" order="BEFORE" resultType="long">
     SELECT SEQ_STORE.NEXTVAL FROM DUAL
    </selectKey>
  INSERT INTO TBL_STORE (STORE_NUMBER, STORE_TITLE, STORE_CONTENT, STORE_CATEGORY_NUMBER, STORE_PRICE, STORE_MAIN_CONTENT)
  VALUES (#{storeNumber}, #{storeTitle}, #{storeContent}, #{storeCategoryNumber}, #{storePrice}, #{storeMainContent})
 </insert>

<!-- 스토어 게시글 읽기 -->
 <select id="storeRead" resultType="storeVo">
  SELECT STORE_NUMBER, STORE_TITLE, STORE_CONTENT , STORE_PRICE, STORE_MAIN_CONTENT, TSC.STORE_CATEGORY_NAME, ts.STORE_CATEGORY_NUMBER  FROM TBL_STORE ts
  JOIN TBL_STORE_CATEGORY tsc
  ON TSC.STORE_CATEGORY_NUMBER = TS.STORE_CATEGORY_NUMBER
  WHERE ts.STORE_NUMBER = #{storeNumber}
 </select>

<!-- 스토어 게시글 삭제 -->
 <delete id="deleteStore">
  DELETE FROM TBL_STORE ts
  WHERE STORE_NUMBER = #{storeNumber}
 </delete>
<!-- 스토어 게시글 수 -->
 <select id="storeTotal" resultType="_int">
  SELECT COUNT(STORE_NUMBER) FROM TBL_STORE
 </select>

<!-- 스토어 게시글 수정 -->
 <update id="updateStore">
  UPDATE TBL_STORE
  SET STORE_TITLE = #{storeTitle}, STORE_CONTENT = #{storeContent}, STORE_PRICE = #{storePrice}, STORE_CATEGORY_NUMBER = #{storeCategoryNumber}, STORE_MAIN_CONTENT = #{storeMainContent}
  WHERE STORE_NUMBER = #{storeNumber}
 </update>

<!-- 카테고리에 따른 스토어 게시글 목록 조회 -->
 <select id="selectStoreListByCategory" resultType="storeVo">
  SELECT
   STORE_NUMBER,
   STORE_TITLE,
   STORE_PRICE,
   STORE_CATEGORY_NAME,
   STORE_FILE_NAME,
   STORE_FILE_UPLOAD_PATH,
   STORE_FILE_UUID
  FROM
   (
    SELECT
     ROWNUM AS RNUM,
     STORE_NUMBER,
     STORE_TITLE,
     STORE_PRICE,
     STORE_CATEGORY_NAME,
     STORE_FILE_NAME,
     STORE_FILE_UPLOAD_PATH,
     STORE_FILE_UUID
    FROM
     (
      SELECT
       STORE_NUMBER,
       STORE_TITLE ,
       STORE_PRICE ,
       tsc.STORE_CATEGORY_NAME ,
       STORE_FILE_NAME ,
       STORE_FILE_UPLOAD_PATH,
       STORE_FILE_UUID
      FROM
       (
        SELECT
         ts.STORE_NUMBER ,
         ts.STORE_TITLE ,
         ts.STORE_PRICE ,
         ts.STORE_CATEGORY_NUMBER,
         tsf.STORE_FILE_NAME,
         tsf.STORE_FILE_UPLOAD_PATH,
         tsf.STORE_FILE_UUID
        FROM
         TBL_STORE ts
          LEFT JOIN
         (
          SELECT
           STORE_FILE_NUMBER ,
           STORE_FILE_NAME ,
           STORE_FILE_UPLOAD_PATH ,
           STORE_FILE_UUID ,
           STORE_NUMBER
          FROM
           (
            SELECT
             STORE_FILE_NUMBER ,
             STORE_FILE_NAME ,
             STORE_FILE_UPLOAD_PATH ,
             STORE_FILE_UUID ,
             STORE_NUMBER,
             RANK() OVER(PARTITION BY STORE_NUMBER ORDER BY STORE_FILE_NUMBER) RK
            FROM
             TBL_STORE_FILE)
          WHERE
           RK = 1) tsf
         ON
          ts.STORE_NUMBER = tsf.STORE_NUMBER) ts
        JOIN TBL_STORE_CATEGORY tsc
             ON
              ts.STORE_CATEGORY_NUMBER = tsc.STORE_CATEGORY_NUMBER
      <trim prefix="WHERE" prefixOverrides="AND">
       <if test="storeCategoryNumber != null">
        AND ts.STORE_CATEGORY_NUMBER = #{storeCategoryNumber}
       </if>
      <if test="storeTitle != null and storeTitle != ''">
       AND ts.STORE_TITLE LIKE '%'||#{storeTitle}||'%'
      </if>
      </trim>
      ORDER BY
       ts.STORE_NUMBER DESC)
<![CDATA[
    WHERE
     ROWNUM <= #{criteria.page} * #{criteria.amount}
             ]]>
        )
  WHERE
   RNUM > (#{criteria.page} - 1 ) * #{criteria.amount}
 </select>

<!-- 카테고리 게시글 토탈 -->
 <select id="categoryStoreTotal" resultType="_int">
  SELECT COUNT(STORE_NUMBER) FROM TBL_STORE
  <trim prefix="WHERE" prefixOverrides="AND">
   <if test="storeCategoryNumber != null">
    AND STORE_CATEGORY_NUMBER = #{storeCategoryNumber}
   </if>
   <if test="storeTitle != null and storeTitle != ''">
    AND STORE_TITLE LIKE '%'||#{storeTitle}||'%'
   </if>
  </trim>
 </select>


<!-- 헤어리스트 조회 -->
 <select id="selectHairList" resultType="hairVo">
  SELECT
   HAIR_NUMBER,
   HAIR_NAME,
   HAIR_FILE_NAME,
   HAIR_FILE_UUID,
   HAIR_FILE_UPLOAD_PATH
  FROM
   (
    SELECT
     ROWNUM AS RNUM ,
     HAIR_NUMBER,
     HAIR_NAME,
     HAIR_FILE_NAME,
     HAIR_FILE_UUID,
     HAIR_FILE_UPLOAD_PATH
    FROM
     (
      SELECT
       th.HAIR_NUMBER,
       HAIR_NAME,
       thf.HAIR_FILE_NAME,
       thf.HAIR_FILE_UUID,
       thf.HAIR_FILE_UPLOAD_PATH
      FROM
       TBL_HAIR th
        LEFT JOIN
       (
        SELECT
         HAIR_FILE_NUMBER ,
         HAIR_FILE_NAME ,
         HAIR_FILE_UPLOAD_PATH ,
         HAIR_FILE_UUID ,
         HAIR_NUMBER
        FROM
         (
          SELECT
           HAIR_FILE_NUMBER ,
           HAIR_FILE_NAME ,
           HAIR_FILE_UPLOAD_PATH ,
           HAIR_FILE_UUID ,
           HAIR_NUMBER,
           RANK() OVER(PARTITION BY HAIR_NUMBER ORDER BY HAIR_FILE_NUMBER) RK
          FROM
           TBL_HAIR_FILE)
        WHERE
         RK = 1) thf
       ON
        th.HAIR_NUMBER = thf.HAIR_NUMBER
      ORDER BY
       HAIR_NUMBER DESC)
<![CDATA[
    WHERE
     ROWNUM <= #{page} * #{amount}
             ]]>
        )
  WHERE
   RNUM > (#{page} - 1 ) * #{amount}
 </select>

<!-- 헤어 게시글 수 -->
 <select id="hairTotal" resultType="_int">
  SELECT COUNT(HAIR_NUMBER) FROM TBL_HAIR
 </select>

<!-- 카테고리 선택 게시글 수 -->
 <select id="categoryHairTotal" resultType="_int">
  SELECT COUNT(HAIR_NUMBER)  FROM TBL_HAIR th
  <trim prefix="WHERE" prefixOverrides="AND">
   <if test="lengthNumber != null">
    AND LENGTH_NUMBER = #{lengthNumber}
   </if>
   <if test="shapeNumber != null">
    AND SHAPE_NUMBER = #{shapeNumber}
   </if>
   <if test="hairGender != null and hairGender != ''">
    AND HAIR_GENDER = #{hairGender}
   </if>
   <if test="hairName != null and hairName != ''">
    AND HAIR_NAME LIKE '%'||#{hairName}||'%'
   </if>
  </trim>
 </select>

<!-- 카테고리 선택으로 헤어리스트 조회 -->
 <select id="selectHairListByCategory" resultType="hairVo">
  SELECT
   HAIR_NUMBER,
   HAIR_NAME,
   HAIR_FILE_NAME,
   HAIR_FILE_UUID,
   HAIR_FILE_UPLOAD_PATH
  FROM
   (
    SELECT
     ROWNUM AS RNUM ,
     HAIR_NUMBER,
     HAIR_NAME,
     HAIR_FILE_NAME,
     HAIR_FILE_UUID,
     HAIR_FILE_UPLOAD_PATH
    FROM
     (
      SELECT
       th.HAIR_NUMBER,
       HAIR_NAME,
       thf.HAIR_FILE_NAME,
       thf.HAIR_FILE_UUID,
       thf.HAIR_FILE_UPLOAD_PATH
      FROM
       TBL_HAIR th
        LEFT JOIN
       (
        SELECT
         HAIR_FILE_NUMBER ,
         HAIR_FILE_NAME ,
         HAIR_FILE_UPLOAD_PATH ,
         HAIR_FILE_UUID ,
         HAIR_NUMBER
        FROM
         (
          SELECT
           HAIR_FILE_NUMBER ,
           HAIR_FILE_NAME ,
           HAIR_FILE_UPLOAD_PATH ,
           HAIR_FILE_UUID ,
           HAIR_NUMBER,
           RANK() OVER(PARTITION BY HAIR_NUMBER ORDER BY HAIR_FILE_NUMBER) RK
          FROM
           TBL_HAIR_FILE)
        WHERE
         RK = 1) thf
       ON
        th.HAIR_NUMBER = thf.HAIR_NUMBER
      <trim prefix="WHERE" prefixOverrides="AND">
       <if test="lengthNumber != null">
        AND LENGTH_NUMBER = #{lengthNumber}
       </if>
        <if test="shapeNumber != null">
         AND SHAPE_NUMBER = #{shapeNumber}
        </if>
        <if test="hairGender != null and hairGender != ''">
         AND HAIR_GENDER  = #{hairGender}
        </if>
      <if test="hairName != null and hairName != ''">
       AND HAIR_NAME LIKE '%'||#{hairName}||'%'
      </if>
      </trim>
      ORDER BY
       HAIR_NUMBER DESC)
    <![CDATA[
    WHERE
     ROWNUM <= #{criteria.page} * #{criteria.amount}
             ]]>
        )
  WHERE
   RNUM > (#{criteria.page} - 1 ) * #{criteria.amount}
 </select>



<!-- 헤어 게시글 작성 -->
 <insert id="insertHair">
  <selectKey keyProperty="hairNumber" order="BEFORE" resultType="long">
   SELECT SEQ_HAIR.NEXTVAL FROM DUAL
  </selectKey>
  INSERT INTO TBL_HAIR (HAIR_NUMBER, HAIR_NAME, HAIR_CONTENT, HAIR_GENDER, SHAPE_NUMBER, LENGTH_NUMBER)
  VALUES (#{hairNumber}, #{hairName}, #{hairContent}, #{hairGender}, #{shapeNumber}, #{lengthNumber})
 </insert>

<!-- 헤어 게시글 읽기 -->
 <select id="hairRead" resultType="hairVo">
  SELECT th.HAIR_NUMBER , HAIR_NAME, HAIR_CONTENT , tl.LENGTH_NAME, HAIR_GENDER, th.SHAPE_NUMBER,
         tfs.SHAPE_NAME
  FROM TBL_HAIR th
        JOIN TBL_LENGTH tl
             ON th.LENGTH_NUMBER = tl.LENGTH_NUMBER
        JOIN TBL_FACE_SHAPE tfs
             ON th.SHAPE_NUMBER  = tfs.SHAPE_NUMBER
  WHERE th.HAIR_NUMBER  = #{hairNumber}
 </select>

<!-- 헤어 게시글 수정시 불러올 게시글 정보 -->
 <select id="hairInfo" resultType="hairDto">
  SELECT HAIR_NUMBER , HAIR_NAME, HAIR_CONTENT , LENGTH_NUMBER , HAIR_GENDER, SHAPE_NUMBER
  FROM TBL_HAIR
  WHERE HAIR_NUMBER  = #{hairNumber}
 </select>

<!-- 헤어게시글 수정 -->
 <update id="updateHair">
  UPDATE TBL_HAIR th
  SET HAIR_NAME = #{hairName},
      HAIR_CONTENT = #{hairContent},
      HAIR_GENDER = #{hairGender},
      LENGTH_NUMBER = #{lengthNumber},
      SHAPE_NUMBER = #{shapeNumber}
  WHERE HAIR_NUMBER  = #{hairNumber}
 </update>

<!-- 헤어 게시글 삭제 -->
 <delete id="deleteHair">
  DELETE FROM TBL_HAIR th
  WHERE HAIR_NUMBER = #{hairNumber}
 </delete>
<!-- 배송 미완료 건 조회 -->
 <select id="selectIncompleteRequest" resultType="adminBuyDto">
  SELECT
   BUY_NUMBER ,
   USER_NAME ,
   BUY_ADDRESS ,
   BUY_MSG ,
   STORE_TITLE ,
   DELIVERY_NUMBER
  FROM
   (
    SELECT
     ROWNUM AS RNUM,
     BUY_NUMBER ,
     USER_NAME,
     BUY_ADDRESS ,
     BUY_MSG ,
     DELIVERY_NUMBER,
     STORE_TITLE
    FROM
     (
      SELECT
       BUY_NUMBER,
       tu.USER_NAME ,
       BUY_ADDRESS || ' ' || BUY_ADDRESS_DETAIL AS BUY_ADDRESS ,
       BUY_MSG ,
       DELIVERY_NUMBER ,
       ts.STORE_TITLE
      FROM
       TBL_BUY tb
        JOIN TBL_STORE ts
             ON
              tb.STORE_NUMBER = ts.STORE_NUMBER
        JOIN TBL_USER tu
             ON
              tb.USER_NUMBER = tu.USER_NUMBER
      WHERE
       DELIVERY_NUMBER != 4
      ORDER BY
       BUY_NUMBER DESC)
	<![CDATA[
    WHERE
     ROWNUM <= #{page} * #{amount}
             ]]>
        )
  WHERE
   RNUM > (#{page} - 1 ) * #{amount}
 </select>

<!-- 미완료 배송 목록 수 -->
 <select id="incompleteTotal" resultType="_int">
  SELECT COUNT(BUY_NUMBER) FROM TBL_BUY tb
  WHERE DELIVERY_NUMBER != 4
 </select>

<!-- 배송 완료 목록 -->
 <select id="selectCompleteList" resultType="adminBuyDto">
  SELECT
   BUY_NUMBER ,
   USER_NAME ,
   BUY_ADDRESS ,
   BUY_MSG ,
   STORE_TITLE ,
   DELIVERY_NUMBER
  FROM
   (
    SELECT
     ROWNUM AS RNUM,
     BUY_NUMBER ,
     USER_NAME,
     BUY_ADDRESS ,
     BUY_MSG ,
     DELIVERY_NUMBER,
     STORE_TITLE
    FROM
     (
      SELECT
       BUY_NUMBER,
       tu.USER_NAME ,
       BUY_ADDRESS || ' ' || BUY_ADDRESS_DETAIL AS BUY_ADDRESS ,
       BUY_MSG ,
       DELIVERY_NUMBER ,
       ts.STORE_TITLE
      FROM
       TBL_BUY tb
        JOIN TBL_STORE ts
             ON
              tb.STORE_NUMBER = ts.STORE_NUMBER
        JOIN TBL_USER tu
             ON
              tb.USER_NUMBER = tu.USER_NUMBER
      WHERE
       DELIVERY_NUMBER = 4
      ORDER BY
       BUY_NUMBER DESC)
	<![CDATA[
    WHERE
     ROWNUM <= #{criteria.page} * #{criteria.amount}
             ]]>
        )
  WHERE
   RNUM > (#{criteria.page} - 1 ) * #{criteria.amount}
 </select>

<!-- 배송 완료 전체 수 -->
 <select id="completeTotal" resultType="_int">
  SELECT COUNT(BUY_NUMBER) FROM TBL_BUY tb
  WHERE DELIVERY_NUMBER = 4
 </select>

<!-- 배송 상태 변경 -->
 <update id="updateDelivery">
  UPDATE TBL_BUY
  SET DELIVERY_NUMBER = #{deliveryNumber}
  WHERE BUY_NUMBER = #{buyNumber}
 </update>

<!-- 등업신청 완료한 게시글 조회 -->
 <select id="selectCompleteLevel" resultType="levelDto">
  SELECT tl.LEVEL_NUMBER FROM TBL_LEVEL tl
  JOIN TBL_USER tu
  ON tu.USER_NUMBER = tl.USER_NUMBER
  WHERE tu.MEMBERSHIP_NUMBER = tl.MEMBERSHIP_NUMBER
  ORDER BY tl.LEVEL_NUMBER DESC
 </select>

</mapper>